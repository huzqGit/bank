<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="farmerbreed">
<sql id="Breed_Column_List" >
	breedId,variety, outputValue,floorArea, assessPrice
</sql>
<insert id="save" useGeneratedKeys="true" keyProperty="id" 
		parameterType="com.bank.beans.FarmerBreed">
		insert into t_farmer_breed
	<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="farmerId != null">
			farmerId,
		</if>
		<if test="variety != null">
			variety,
		</if>
		<if test="output != null">
			output,
		</if>
		<if test="outputValue != null">
			outputValue,
		</if>
		<if test="floorArea != null">
			floorArea,
		</if>
		<if test="assessPrice != null">
			assessPrice,
		</if>
   		<if test="recorder != null">
   			recorder,
   		</if>
   		<if test="recordTime != null">
   			recordTime
   		</if>
	</trim>
	<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="farmerId != null">
			#{farmerId,jdbcType=BIGINT},
		</if>
		<if test="variety != null">
			#{variety,jdbcType=VARCHAR},
		</if>
		<if test="output != null">
			#{output,jdbcType=VARCHAR},
		</if>
		<if test="outputValue != null">
			#{outputValue,jdbcType=DOUBLE},
		</if>
		<if test="floorArea != null">
			#{floorArea,jdbcType=VARCHAR},
		</if>
		<if test="assessPrice != null">
			#{assessPrice,jdbcType=DOUBLE},
		</if>
   		<if test="recorder != null">
   			#{recorder,jdbcType=VARCHAR},
   		</if>
   		<if test="recordTime != null">
   			#{recordTime,jdbcType=TIMESTAMP}
   		</if>
	</trim>
</insert>
<update id="update" >
	update t_farmer_breed
	set farmerId = #{farmerId,jdbcType=BIGINT},
	variety = #{variety,jdbcType = VARCHAR},
	output = #{output,jdbcType = VARCHAR},
	outputValue = #{outputValue,jdbcType = DOUBLE},
	floorArea = #{floorArea,jdbcType = VARCHAR},
	assessPrice = #{assessPrice,jdbcType = DOUBLE}
	where breedId = #{id,jdbcType = BIGINT}
</update>
<select id="findByPK" parameterType="Long" 
	resultType="com.bank.beans.FarmerBreed">
	select 
	<include refid="Breed_Column_List" />
	from t_farmer_breed where breedId = #{id,jdbcType=INTEGER}
</select>
<select id="findByID" parameterType="Long" 
	resultMap="farmerBreedList">
	select 
	<include refid="Breed_Column_List" />
	from t_farmer_breed where farmerId = #{farmerId,jdbcType=BIGINT}
</select>
<resultMap id="farmerBreedList" type="com.bank.beans.FarmerBreed">
    <result column="breedId" property="id" jdbcType="BIGINT"/>
    <result column="farmerId" property="farmerId" jdbcType="BIGINT" />
    <result column="variety" property="variety" jdbcType="VARCHAR" />
    <result column="output" property="output" jdbcType="VARCHAR" />
	<result column="floorArea" property="floorArea" jdbcType="VARCHAR"/>
	<result column="outputValue" property="outputValue" jdbcType="DOUBLE"/>
	<result column="assessPrice" property="assessPrice" jdbcType="DOUBLE"/>
    <result column="recorder" property="recorder" jdbcType="VARCHAR"/>
    <result column="recordTime" property="recordTime" jdbcType="DATE" />
</resultMap>
<select id="pageing" parameterType="Map" resultMap="farmerBreedList">
	select 
	<include refid="Breed_Column_List" />
	from 
	(select t.*,rownumber() over(order by recordtime desc) as rn from t_farmer_breed t
	<where>
		<if test="farmerName != null and farmerName != '' ">
			t.farmername like CONCAT(CONCAT('%',#{farmerName}),'%') 
		</if>
		<if test="farmerIdNum != null and farmerIdNum != ''">
		   	and t.farmeridnum like CONCAT(CONCAT('%',#{farmerIdNum}),'%')  
		</if>
		<if test="variety != null and variety != '' ">
			t.variety like CONCAT(CONCAT('%',#{variety}),'%') 
		</if>
		<if test="recorder != null and recorder != '' ">
		    and t.recoder like CONCAT(CONCAT('%',#{recoder}),'%')  
		</if>
		<if test="recordTimeBegin !=null and recordTimeBegin != ''">
		   	<![CDATA[and t.recordtime >=to_date('#{recordTimeBegin}','yyyy-mm-dd')]]>
		</if>
		<if test="recordTimeEnd !=null and recordTimeEnd != ''">
		   	<![CDATA[and t.recordtime <=to_date('#{recordTimeEnd}','yyyy-mm-dd')]]>
		</if>
	 </where>
	 )
	 <where>
	 	<if test="start != null">
	    	rn between #{start} and #{end}
	   	</if>
	</where>
</select>
</mapper>