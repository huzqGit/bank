<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="farmerhouse">
<sql id="House_Column_List" >
	houseId, farmerId, houseProperty, houseType, houseAddress,
	buildArea, buildDate, buildPrice, floorArea, assessPrice
</sql>
<insert id="save" useGeneratedKeys="true" keyProperty="id" 
	parameterType="com.bank.beans.FarmerHouse">
		insert into t_farmer_house
		<trim prefix="(" suffix=")" suffixOverrides=",">
			 <if test="farmerId != null">
			 	farmerId,
			 </if>
			 <if test="houseProperty != null">
				houseProperty,
			 </if>
			 <if test="houseType != null">
				houseType,
			 </if>
			 <if test="houseAddress != null">
			    houseAddress,
			 </if>
	  		 <if test="buildArea != null">
	  		    buildArea,
	  		 </if>
			<if test="buildDate != null">
				buildDate,
			</if>
	  		<if test="buildPrice != null">
	  		    buildPrice,
	  		</if>
	  		<if test="floorArea != null">
	  			floorArea,
	  		</if>
	  		<if test="assessPrice != null">
	  			assessPrice
	  		</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
	        <if test="farmerId != null">
	         	#{farmerId,jdbcType=BIGINT},
	        </if>
	        <if test="houseProperty != null">
	        	#{houseProperty,jdbcType=VARCHAR},
	        </if>
	        <if test="houseType != null">
	        	#{houseType,jdbcType=VARCHAR},
	        </if>
	        <if test="houseAddress != null">
	          	#{houseAddress,jdbcType=VARCHAR},
	        </if>
	        <if test="buildArea != null">
	            #{buildArea,jdbcType=VARCHAR},
	        </if>
	        <if test="buildDate != null">
	            #{buildDate,jdbcType=VARCHAR},
	        </if>
	        <if test="buildPrice != null">
	            #{buildPrice,jdbcType=VARCHAR},
	        </if>
	        <if test="floorArea != null">
	           #{floorArea,jdbcType=VARCHAR},
	        </if>
	        <if test="assessPrice != null">
	           #{assessPrice,jdbcType=VARCHAR}
	        </if>
		</trim>
</insert>
<update id="update" parameterType="com.bank.beans.FarmerHouse">
	update t_farmer_house
	set farmerId = #{farmerId,jdbcType=BIGINT},
	houseProperty = #{houseProperty,jdbcType=VARCHAR},
	houseType = #{houseType,jdbcType=VARCHAR},
	houseAddress = #{houseAddress,jdbcType=VARCHAR},
	buildArea = #{buildArea,jdbcType=VARCHAR},
	buildDate = #{buildDate,jdbcType=VARCHAR},
	buildPrice = #{buildPrice,jdbcType=VARCHAR},
	floorArea = #{floorArea,jdbcType=VARCHAR},
	assessPrice = #{assessPrice,jdbcType=VARCHAR}
	where houseId =#{id,jdbcType=BIGINT}
</update>
<select id="findByPK" parameterType="Long" resultType="com.bank.beans.FarmerHouse">
		select 
		<include refid="House_Column_List" />
		from t_farmer_house where houseId = #{id,jdbcType=BIGINT}
</select>
<select id="findByFarmerId" parameterType="Long" 
	resultMap="farmerHouseList">
	select 
	<include refid="House_Column_List" />
	from t_farmer_house where farmerId = #{id,jdbcType=BIGINT}
</select>
<select id="findByFarmers" parameterType="list" resultMap="farmer.farmerList">
	select a.*
	from t_farmer a
	where a.farmerId in 
	(
	select distinct farmerId from
		(
		select farmerId from t_farmer_house
		union all
		select farmerId from t_farmer_forest
		union all
		select farmerId from t_farmer_breed
		union all
		select farmerId from t_farmer_device
		)
	)
	and a.farmerId in
	<foreach item="item" index="index" collection="list" 
			open="(" separator="," close=")">
	#{item}
	</foreach>
</select>
<resultMap id="farmerHouseList" type="com.bank.beans.FarmerHouse">
    <id column="houseId" property="id" jdbcType="BIGINT"/>
    <result column="farmerId" property="farmerId" jdbcType="BIGINT" />
    <result column="houseProperty" property="houseProperty" jdbcType="VARCHAR" />
    <result column="houseType" property="houseType" jdbcType="VARCHAR" />
	<result column="houseAddress" property="houseAddress" jdbcType="VARCHAR"/>
	<result column="buildArea" property="buildArea" jdbcType="VARCHAR"/>
    <result column="buildDate" property="buildDate" jdbcType="DATE"/>
    <result column="buildPrice" property="buildPrice" jdbcType="DOUBLE"/>
	<result column="floorArea" property="floorArea" jdbcType="VARCHAR" />
	<result column="assessPrice" property="assessPrice" jdbcType="VARCHAR"/>
</resultMap>
<select id="pageing" parameterType="Map" resultMap="farmerHouseList">
	select 
	<include refid="House_Column_List" />
	from 
	(select t.*,rownumber() over(order by recordtime desc) as rn from t_farmer_house t
	<where>
		<if test="farmerName != null and farmerName != '' ">
			t.farmername like CONCAT(CONCAT('%',#{farmerName}),'%') 
		</if>
		<if test="farmerIdNum != null and farmerIdNum != ''">
		   	and t.farmeridnum like CONCAT(CONCAT('%',#{farmerIdNum}),'%')  
		</if>
		<if test="houseProperty != null and houseProperty != ''">
		   	and t.houseproperty ='#{houseProperty}' 
		</if>
		<if test="houseType != null and houseType != ''">
		   	and t.housetype ='#{houseType}'  
		</if>
		<if test="recorder != null and recorder != '' ">
		    and t.recoder like CONCAT(CONCAT('%',#{recoder}),'%')  
		</if>
		<if test="recordTimeBegin !=null and recordTimeBegin != ''">
		   	<![CDATA[and t.recordtime >=to_date('#{recordTimeBegin}','yyyy-mm-dd')]]>
		</if>
		<if test="recordTimeEnd !=null and recordTimeEnd != ''">
		   	<![CDATA[and t.recordtime <=to_date('#{recordTimeEnd}','yyyy-mm-dd')]]>
		</if>
	 </where>
	 )
	 <where>
	 	<if test="start != null">
	    	rn between #{start} and #{end}
	   	</if>
	</where>
</select>
</mapper>