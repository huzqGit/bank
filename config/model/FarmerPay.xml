<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="farmerpay">
<sql id="Pay_Column_List" >
	payId, farmerId, farmingIncome, avocationIncome, businessIncome,
	otherIncome, totalIncome,productPay, livingPay, medicalPay, educatePay,
	insuredPay,otherPay, totalPay,year, recorder, recordTime
</sql>
<insert id="save" useGeneratedKeys="true" keyProperty="id" 
		parameterType="com.bank.beans.FarmerPay">
		insert into t_farmer_pay
		<trim prefix="(" suffix=")" suffixOverrides=",">
		   <if test="farmerId != null">
		   	   farmerId,
		   </if>
		   <if test="farmingIncome != null">
		   	   farmingIncome,
		   </if>
		   <if test="avocationIncome != null">
		       avocationIncome,
		   </if>
		   <if test="businessIncome != null">
		   	   businessIncome,
		   </if>
		   <if test="otherIncome != null">
		       otherIncome,
		   </if>
		   <if test="totalIncome != null">
		   	   totalIncome,
		   </if>
	  	   <if test="productPay != null">
	  		   productPay,
	  	   </if>
	  	   <if test="livingPay != null">
	  		   livingPay,
	  	   </if>
	   	   <if test="medicalPay != null">
	   		   medicalPay,
	   	   </if>
	   	   <if test="educatePay != null">
	   		   educatePay,
	   	   </if>
	   	   <if test="insuredPay != null">
	   		   insuredPay,
	   	   </if>
		   <if test="otherPay != null">
			   otherPay,
		   </if>
		   <if test="totalPay != null">
			   totalPay,
		   </if>
		    <if test="year != null">
			   year,
		   </if>
	   	   <if test="recorder != null">
	   		   recorder,
	   	   </if>
	  	   <if test="recordTime != null">
	  		   recordTime
	  	   </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="farmerId != null">
		   	   #{farmerId,jdbcType=VARCHAR},
		   </if>
	       <if test="farmingIncome != null">
		   	   #{farmingIncome,jdbcType=DOUBLE},
		   </if>
		   <if test="avocationIncome != null">
		       #{avocationIncome,jdbcType=DOUBLE},
		   </if>
		   <if test="businessIncome != null">
		   	   #{businessIncome,jdbcType=DOUBLE},
		   </if>
		   <if test="otherIncome != null">
		       #{otherIncome,jdbcType=DOUBLE},
		   </if>
		   <if test="totalIncome != null">
		   	   #{totalIncome,jdbcType=DOUBLE},
		   </if>
	       <if test="productPay != null">
	           #{productPay,jdbcType=DOUBLE},
	       </if>
           <if test="livingPay != null">
           	   #{livingPay,jdbcType=DOUBLE},
           </if>
           <if test="medicalPay != null">
               #{medicalPay,jdbcType=DOUBLE},
           </if>
           <if test="educatePay != null">
           	   #{educatePay,jdbcType=DOUBLE},
           </if>
           <if test="insuredPay != null">
          	   #{insuredPay,jdbcType=DOUBLE},
          </if>
	      <if test="otherPay != null">
	           #{otherPay,jdbcType=DOUBLE},
	      </if>
	      <if test="totalPay != null">
	      	   #{totalPay,jdbcType=DOUBLE},
	      </if>
	      <if test="year != null">
	      	   #{year,jdbcType=VARCHAR},
	      </if>
          <if test="recorder != null">
          	   #{recorder,jdbcType=VARCHAR},
          </if>
         <if test="recordTime != null">
              #{recordTime,jdbcType=TIMESTAMP}
         </if>
		</trim>
</insert>
<update id="update" parameterType="com.bank.beans.FarmerPay">
	update t_farmer_pay
	set farmerId = #{farmerId,jdbcType=BIGINT}, 
	farmingIncome = #{farmingIncome,jdbcType=DOUBLE},
 	avocationIncome = #{avocationIncome,jdbcType=DOUBLE} ,
 	businessIncome = #{ businessIncome,jdbcType=DOUBLE} ,
 	otherIncome = #{otherIncome,jdbcType=DOUBLE} ,
  	totalIncome = #{ totalIncome,jdbcType=DOUBLE},
 	productPay = #{productPay,jdbcType=DOUBLE},
 	livingPay = #{ livingPay,jdbcType=DOUBLE},
 	medicalPay = #{ medicalPay,jdbcType=DOUBLE},
  	educatePay = #{ educatePay,jdbcType=DOUBLE}, 
 	insuredPay = #{ insuredPay,jdbcType=DOUBLE},
	otherPay = #{ otherPay,jdbcType=DOUBLE},
	totalPay = #{ totalPay,jdbcType=DOUBLE}, 
	year = #{year,jdbcType=VARCHAR}
	where payId=#{id,jdbcType=BIGINT}
</update>
<select id="findByPK" parameterType="Long" resultMap="farmerPayList">
		select 
		<include refid="Pay_Column_List" />
		from t_farmer_pay where payId = #{id,jdbcType=INTEGER}
</select>
<select id="findByFarmerAndYear" parameterType="Map" resultMap="farmerPayList">
	select a.farmerIdNum,a.farmerName,b.*
	from t_farmer a,t_farmer_pay b
	where a.farmerId = b.farmerId
	<if test="year != null and year != ''">
		and b.year = #{year,jdbcType=VARCHAR}
	</if> 
	<if test="farmerId != null and farmerId !=''"> 
		and a.farmerId = #{farmerId,jdbcType=BIGINT}
	</if>
</select>
<select id="findByFarmersAndYear" parameterType="Map" resultMap="farmerPayList">
	select a.farmerIdNum,a.farmerName,b.*
	from t_farmer a,t_farmer_pay b
	where a.farmerId = b.farmerId
	<if test="year != null and year != ''">
		and b.year = #{year,jdbcType=VARCHAR}
	</if> 
	<if test="farmerIds != null"> 
		and a.farmerId in
		<foreach item="item" index="index" collection="farmerIds" 
			open="(" separator="," close=")">
		#{item}
		</foreach>
	</if>
</select>
<select id="findByFarmer" parameterType="Map" resultMap="farmerPayList">
		select 
		<include refid="Pay_Column_List" />
		from t_farmer_pay 
		where farmerId = #{farmerId,jdbcType=BIGINT}
</select>
<select id="findLatestByFarmer" parameterType="Map" resultMap="farmerPayList">
		select 
		<include refid="Pay_Column_List" />
		from t_farmer_pay 
		where farmerId = #{farmerId,jdbcType=BIGINT}
		and year=(select max(year) from t_farmer_pay
		where farmerId =#{farmerId,jdbcType=BIGINT})
</select>
<resultMap id="farmerPayList" type="com.bank.beans.FarmerPay">
    <id column="payId" property="id" jdbcType="BIGINT"/>
    <result column="farmerId" property="farmerId" jdbcType="BIGINT" />
    <result column="farmingIncome" property="farmingIncome" jdbcType="DOUBLE" />
    <result column="avocationIncome" property="avocationIncome" jdbcType="DOUBLE" />
	<result column="businessIncome" property="businessIncome" jdbcType="DOUBLE" />
	<result column="otherIncome" property="otherIncome" jdbcType="DOUBLE" />
    <result column="totalIncome" property="totalIncome" jdbcType="DOUBLE" />
    <result column="productPay" property="productPay" jdbcType="DOUBLE" />
    <result column="livingPay" property="livingPay" jdbcType="DOUBLE" />
	<result column="medicalPay" property="medicalPay" jdbcType="DOUBLE" />
	<result column="educatePay" property="educatePay" jdbcType="DOUBLE" />
    <result column="insuredPay" property="insuredPay" jdbcType="DOUBLE" />
    <result column="otherPay" property="otherPay" jdbcType="DOUBLE" />
    <result column="totalPay" property="totalPay" jdbcType="DOUBLE" />
	<result column="year" property="year" jdbcType="VARCHAR" />
    <result column="recorder" property="recorder" jdbcType="VARCHAR" />
    <result column="recordTime" property="recordTime" jdbcType="DATE" />
</resultMap>
<select id="pageing" parameterType="Map" resultMap="farmerPayList">
	select 
	<include refid="Pay_Column_List" />
	from 
	(select t.*,rownumber() over(order by recordtime desc) as rn from t_farmer_pay t
	<where>
		<if test="farmerName != null and farmerName != '' ">
			t.farmername like CONCAT(CONCAT('%',#{farmerName}),'%') 
		</if>
		<if test="farmerIdNum != null and farmerIdNum != ''">
		   	and t.farmeridnum like CONCAT(CONCAT('%',#{farmerIdNum}),'%')  
		</if>
		<if test="recorder != null and recorder != '' ">
		    and t.recoder like CONCAT(CONCAT('%',#{recoder}),'%')  
		</if>
		<if test="recordTimeBegin !=null and recordTimeBegin != ''">
		   	<![CDATA[and t.recordtime >=to_date('#{recordTimeBegin}','yyyy-mm-dd')]]>
		</if>
		<if test="recordTimeEnd !=null and recordTimeEnd != ''">
		   	<![CDATA[and t.recordtime <=to_date('#{recordTimeEnd}','yyyy-mm-dd')]]>
		</if>
	 </where>
	 )
	 <where>
	 	<if test="start != null">
	    	rn between #{start} and #{end}
	   	</if>
	</where>
</select>
</mapper>