<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 名称空间有特殊的用途 -->
<mapper namespace="organ">
<resultMap id="BaseResultMap" type="com.bank.beans.Organ" >
  <id column="organ_id" property="organId" jdbcType="VARCHAR" />
  <result column="organ_name" property="organName" jdbcType="VARCHAR" />
  <result column="organ_pid" property="organPid" jdbcType="VARCHAR" />
  <result column="organ_short" property="organShort" jdbcType="VARCHAR" />
  <result column="organ_no" property="organNo" jdbcType="VARCHAR" />
  <result column="organ_type" property="organType" jdbcType="VARCHAR" />
</resultMap>
<resultMap id="organResultMap" type="java.lang.String" >
  <id column="organ_id" property="organId" jdbcType="VARCHAR" />
</resultMap>
<sql id="Base_Column_List" >
  organ_id, organ_name, organ_pid, organ_short, organ_no, organ_type
</sql>
<select id="organ.selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
  select 
  <include refid="Base_Column_List" />
  from T_ORGAN
  where organ_id = #{organId,jdbcType=VARCHAR}
</select>

<insert id="organ.insert" parameterType="com.bank.beans.Organ">
  insert into T_ORGAN(organ_id, organ_name, organ_pid, organ_short,organ_no, organ_type) 
  values(#{organId}, #{organName}, #{organPid}, #{organShort}, #{organNo}, #{organType})
</insert>

<insert id="organ.insertSelective" parameterType="com.bank.beans.Organ" >
    insert into T_ORGAN
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="organId != null" >
        organ_id,
      </if>
      <if test="organName != null" >
        organ_name,
      </if>
      <if test="organPid != null" >
        organ_pid,
      </if>
      <if test="organShort != null" >
        organ_short,
      </if>
      <if test="organType != null" >
        organ_type,
      </if>
      <if test="organNo != null" >
        organ_no,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="organId != null" >
        #{organId,jdbcType=VARCHAR},
      </if>
      <if test="organName != null" >
        #{organName,jdbcType=VARCHAR},
      </if>
      <if test="organPid != null" >
        #{organPid,jdbcType=VARCHAR},
      </if>
      <if test="organShort != null" >
        #{organShort,jdbcType=VARCHAR},
      </if>
      <if test="organType != null" >
        #{organType,jdbcType=VARCHAR},
      </if>
      <if test="organNo != null" >
        #{organNo,jdbcType=VARCHAR},
      </if>
    </trim>
</insert>
<update id="organ.update" parameterType="com.bank.beans.Organ">
	update T_ORGAN 
	set organ_name = #{organName}, 
	organ_pid = #{organPid}, 
	organ_short = #{organShort},
	organ_no = #{organNo}, 
	organ_type = #{organType}
	where organ_id = #{organId}
</update>
  <update id="organ.updateByPrimaryKeySelective" parameterType="com.bank.beans.Organ" >
    update T_ORGAN
    <set >
      <if test="organName != null" >
        organ_name = #{organName,jdbcType=VARCHAR},
      </if>
      <if test="organPid != null" >
        organ_Pid = #{organPid,jdbcType=VARCHAR},
      </if>
      <if test="organShort != null" >
        organ_short = #{organShort,jdbcType=VARCHAR},
      </if>
      <if test="organNo != null" >
        organ_no = #{organNo,jdbcType=VARCHAR},
      </if>
      <if test="organType != null" >
        organ_type = #{organType,jdbcType=VARCHAR},
      </if>
    </set>
    where organ_id = #{organId,jdbcType=VARCHAR}
  </update>
<insert id="organ.delete" parameterType="string">
  delete T_ORGAN where organ_id = #{organId}
</insert>

<resultMap id="organUserList" type="java.util.HashMap">
    <result column="ID" property="ID" jdbcType="VARCHAR" />
    <result column="TEXT" property="TEXT" jdbcType="VARCHAR" />
    <result column="PID" property="PID" jdbcType="VARCHAR" />
    <result column="ICONCLS" property="ICONCLS" jdbcType="VARCHAR" />
</resultMap>
<select id="organ.organUser" resultMap="organUserList">
SELECT organ_id ID, organ_name TEXT, organ_pid PID, ICONCLS FROM
   (SELECT organ_id, organ_name, organ_pid, '' iconCls FROM T_ORGAN
   union 
   SELECT user_id, user_name, organ_id, 'icon-user' iconCls FROM T_USER)
</select>

<resultMap id="organCheckedUserList" type="java.util.HashMap">
    <result column="ID" property="ID" jdbcType="VARCHAR" />
    <result column="TEXT" property="TEXT" jdbcType="VARCHAR" />
    <result column="PID" property="PID" jdbcType="VARCHAR" />
    <result column="ICONCLS" property="ICONCLS" jdbcType="VARCHAR" />
    <result column="checked" property="checked" jdbcType="VARCHAR" />
</resultMap>
<select id="organ.organCheckedUser" resultMap="organCheckedUserList" parameterType="string">
SELECT organ_id ID, organ_name TEXT, organ_pid PID, ICONCLS, checked FROM
   (SELECT organ_id, organ_name, organ_pid, '' iconCls, 'false' as checked  FROM T_ORGAN
   union 
   SELECT user_id, user_name, organ_id, 'icon-user' iconCls, (select 'true' as checked from T_USER_ROLE where T_USER_ROLE.USER_ID = T_USER.USER_ID and T_USER_ROLE.ROLE_ID=#{roleId})  FROM T_USER)
</select>

<select id="organ.organUserByCondition" resultMap="organUserList" parameterType="string">
WITH RPL (ID, TEXT, PID, ICONCLS) AS        
(        
SELECT ROOT.organ_id ID, ROOT.organ_name TEXT, ROOT.organ_pid PID, '' ICONCLS         
FROM t_organ ROOT        
WHERE ROOT.organ_id = #{unitId} 
UNION ALL       
SELECT CHILD.organ_id ID , CHILD.organ_name TEXT, CHILD.organ_pid PID, '' ICONCLS 
FROM RPL PARENT, t_organ CHILD
WHERE PARENT.ID = CHILD.organ_pid
UNION ALL       
SELECT CHILD.user_id ID, CHILD.user_name TEXT, CHILD.organ_id PID, 'icon-user' ICONCLS
FROM RPL PARENT, t_user CHILD
WHERE PARENT.ID = CHILD.organ_id
)
SELECT DISTINCT ID, TEXT, PID , ICONCLS     
FROM RPL
ORDER BY  ID, TEXT, PID, ICONCLS
</select>
<select id="organ.getSubOrgansByUnitId" resultMap="organResultMap" parameterType="String" >
 WITH RPL (organ_id) AS        
(        
SELECT ROOT.organ_id        
FROM t_organ ROOT        
WHERE ROOT.organ_id = #{unitId}  
UNION ALL       
SELECT CHILD.organ_id
FROM RPL PARENT, t_organ CHILD
WHERE PARENT.organ_id = CHILD.organ_pid
)
SELECT DISTINCT organ_id       
FROM RPL
ORDER BY organ_id
</select>


</mapper>