<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="farmerdevice">
<sql id="Device_Column_List" >
	deviceId,name, brand, buyingPrice,buyingDate, assessPrice
</sql>
<insert id="save" useGeneratedKeys="true" keyProperty="id" 
	parameterType="com.bank.beans.FarmerDevice">
	insert into t_farmer_device
	<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="farmerId != null">
		  	farmerId,
		</if>
		<if test="name != null">
		  	name,
		</if>
    	<if test="brand != null">
   			brand,
   		</if>
   		<if test="buyingPrice != null">
   			buyingPrice,
   		</if>
  		<if test="buyingDate != null">
  			buyingDate,
  		</if>
  		<if test="assessPrice != null">
  			assessPrice,
  		</if>
		<if test="recorder != null">
		 	recorder,
		</if>
  		<if test="recordTime != null">
  			recordTime
  		</if>
	</trim>
	<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="farmerId != null">
		  	#{farmerId,jdbcType=BIGINT},
		</if>
		<if test="name != null">
		  	#{name,jdbcType=VARCHAR},
		</if>
		<if test="brand != null">
   			#{brand,jdbcType=VARCHAR},
   		</if>
   		<if test="buyingPrice != null">
   			#{buyingPrice,jdbcType=VARCHAR},
   		</if>
  		<if test="buyingDate != null">
  			#{buyingDate,jdbcType=VARCHAR},
  		</if>
  		<if test="assessPrice != null">
  			#{assessPrice,jdbcType=VARCHAR},
  		</if>
		<if test="recorder != null">
		 	#{recorder,jdbcType=VARCHAR},
		</if>
  		<if test="recordTime != null">
  			#{recordTime,jdbcType=TIMESTAMP}
  		</if>
	</trim>
</insert>
<update id="update">
 update t_farmer_device
 set farmerId = #{farmerId,jdbcType=BIGINT},
 name = #{name,jdbcType = VARCHAR},
 brand = #{brand,jdbcType = VARCHAR},
 buyingPrice = #{buyingPrice,jdbcType = VARCHAR},
 buyingDate = #{buyingDate,jdbcType = VARCHAR},
 assessPrice = #{assessPrice,jdbcType = VARCHAR}
 where deviceId = #{id,jdbcType = BIGINT}
</update>
<select id="findByPK" parameterType="Long" resultType="com.bank.beans.FarmerDevice">
	select 
	<include refid="Device_Column_List" />
	from t_farmer_device where deviceId = #{id,jdbcType=INTEGER}
</select>
<select id="findByID" parameterType="Long" 
	resultMap="farmerDeviceList">
	select 
	<include refid="Device_Column_List" />
	from t_farmer_device where farmerId = #{farmerId,jdbcType=BIGINT}
</select>
<resultMap id="farmerDeviceList" type="com.bank.beans.FarmerDevice">
    <result column="deviceId" property="id" jdbcType="BIGINT"/>
    <result column="farmerId" property="farmerId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="brand" property="brand" jdbcType="VARCHAR" />
	<result column="buyingPrice" property="buyingPrice" jdbcType="VARCHAR"/>
	<result column="buyingDate" property="buyingDate" jdbcType="VARCHAR"/>
	<result column="assessPrice" property="assessPrice" jdbcType="VARCHAR"/>
    <result column="recorder" property="recorder" jdbcType="VARCHAR"/>
    <result column="recordTime" property="recordTime" jdbcType="DATE" />
</resultMap>
<select id="pageing" parameterType="Map" resultMap="farmerDeviceList">
	select 
	<include refid="Device_Column_List" />
	from 
	(select t.*,rownumber() over(order by recordtime desc) as rn from t_farmer_device t
	<where>
		<if test="farmerName != null and farmerName != '' ">
			t.farmername like CONCAT(CONCAT('%',#{farmerName}),'%') 
		</if>
		<if test="farmerIdNum != null and farmerIdNum != ''">
		   	and t.farmeridnum like CONCAT(CONCAT('%',#{farmerIdNum}),'%')  
		</if>
		<if test="name != null and name != '' ">
			t.name like CONCAT(CONCAT('%',#{name}),'%') 
		</if>
		<if test="brand != null and brand != '' ">
			t.brand like CONCAT(CONCAT('%',#{brand}),'%') 
		</if>
		<if test="recorder != null and recorder != '' ">
		    and t.recoder like CONCAT(CONCAT('%',#{recoder}),'%')  
		</if>
		<if test="recordTimeBegin !=null and recordTimeBegin != ''">
		   	<![CDATA[and t.recordtime >=to_date('#{recordTimeBegin}','yyyy-mm-dd')]]>
		</if>
		<if test="recordTimeEnd !=null and recordTimeEnd != ''">
		   	<![CDATA[and t.recordtime <=to_date('#{recordTimeEnd}','yyyy-mm-dd')]]>
		</if>
	 </where>
	 )
	 <where>
	 	<if test="start != null">
	    	rn between #{start} and #{end}
	   	</if>
	</where>
</select>
</mapper>