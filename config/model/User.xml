<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 名称空间有特殊的用途 -->
<mapper namespace="user">
<resultMap id="BaseResultMap" type="com.bank.beans.User" >
  <id column="user_id" property="userId" jdbcType="VARCHAR" />
  <result column="user_name" property="userName" jdbcType="VARCHAR" />
  <result column="password" property="password" jdbcType="VARCHAR" />
  <result column="sex" property="sex" jdbcType="INTEGER" />
  <result column="address" property="address" jdbcType="VARCHAR" />
  <result column="birthday" property="birthday" jdbcType="DATE" />
  <result column="organ_id" property="organId" jdbcType="VARCHAR" />
  <result column="unit_id" property="unitId" jdbcType="VARCHAR" />
  <result column="isadmin" property="isAdmin" jdbcType="VARCHAR" />
  <result column="remind_cycle" property="remindCycle" jdbcType="INTEGER" />
  <result column="remind_date" property="remindDate" jdbcType="DATE" />
</resultMap>
<sql id="Base_Column_List" >
  user_id, user_name, password, sex, birthday, address, organ_id, unit_id, isadmin
</sql>
<!-- 查询用户信息
select：将select标签内容称为statement
id：是user.xml中的唯一标识 ，statement的id
parameterType：指定向sql（向statement中）中传入参数的类型
#{}：表示一个点位符，{}中的id表示传入变量名，当传入单个值｛｝中的变量名可以随意
resultType：将sql查询结果集映射成java对象的类型
 -->
<select id="user.findUserByUsername" parameterType="string"
resultType="com.bank.beans.User">
   SELECT * FROM T_USER WHERE user_name = #{id}
</select>

<!-- 插入用户
parameterType：指定输入参数类型，包括username,birthday,sex,address,detail,score
#{username}：里边的username是com.bank.beans.User的属性

 -->
 <insert id="user.delete" parameterType="string">
  delete T_USER where user_id = #{userId}
</insert>
<insert id="user.insert" parameterType="com.bank.beans.User">
  insert into T_USER(user_id, user_name, password, birthday,sex,address, organ_id, 
  unit_id, isadmin, remind_cycle, remind_date) 
  values(#{userId}, #{userName}, #{password}, #{birthday}, #{sex}, #{address}, 
  #{organId}, #{unitId}, #{isAdmin},  #{remindCycle},  #{remindDate})
</insert>

<insert id="user.insertSelective" parameterType="com.bank.beans.User">
  insert into T_USER
  <trim prefix="(" suffix=")" suffixOverrides=",">
  	<if test="userId != null">
  		user_id,
  	</if>
  	<if test="userName != null">
  		user_name,
  	</if>
  	<if test="password != null">
  		password,
  	</if>
  	<if test="birthday != null">
  		birthday,
  	</if>
  	<if test="sex != null">
  		sex,
  	</if>
  	<if test="address != null">
  		address,
  	</if>
  	<if test="organId != null">
  		organ_id,
  	</if>
  	<if test="unitId != null">
  		unit_id,
  	</if>
  	<if test="isAdmin != null">
  		isadmin,
  	</if>
  	<if test="remindCycle != null">
  		remind_cycle,
  	</if>
  	<if test="remindDate != null">
  		remind_date,
  	</if>
  </trim>	
  <trim prefix="values (" suffix=")" suffixOverrides=",">
  	<if test="userId != null">
  		#{userId,jdbcType=VARCHAR},
  	</if>
  	<if test="userName != null">
  		#{userName,jdbcType=VARCHAR},
  	</if>
  	<if test="password != null">
  		#{password,jdbcType=VARCHAR},
  	</if>
  	<if test="birthday != null">
  		#{birthday,jdbcType=DATE},
  	</if>
  	<if test="sex != null">
  		#{sex,jdbcType=INTEGER},
  	</if>
  	<if test="address != null">
  		#{address,jdbcType=VARCHAR},
  	</if>
  	<if test="organId != null">
  		#{organId,jdbcType=VARCHAR},
  	</if>
  	<if test="unitId != null">
  		#{unitId,jdbcType=VARCHAR},
  	</if>
  	<if test="isAdmin != null">
  		#{isAdmin,jdbcType=VARCHAR},
  	</if>
  	<if test="remindCycle != null">
  		#{remindCycle,jdbcType=INTEGER},
  	</if>
  	<if test="remindDate != null">
  		#{remindDate,jdbcType=DATE},
  	</if>
  </trim>
</insert>

<update id="user.update" parameterType="com.bank.beans.User">
	update T_USER set user_name = #{userName}, password = #{password}, birthday = #{birthday},
	sex = #{sex},address = #{address}, organ_id = #{organId}, unit_id = #{unitId}, 
	isadmin = #{isAdmin}, remind_cycle = #{remindCycle}, remind_date = #{remindDate} where user_id = #{userId}
</update>

<insert id="deleteUser" parameterType="string">
  delete T_USER where user_id = #{userId}
</insert>

<delete id="user.deleteUsers" parameterType="string">
  delete from T_USER where user_id in (#{userIds})
</delete>

<select id="user.verifyUser" parameterType="com.bank.beans.User" 
resultMap="BaseResultMap">
   SELECT 
   <include refid="Base_Column_List"/>
   FROM T_USER WHERE user_id = #{userId} and password = #{password}
</select>

<select id="user.getUserById" parameterType="string"
resultMap="BaseResultMap">
   SELECT 
   <include refid="Base_Column_List"/>
   FROM T_USER WHERE user_id = #{userId}
</select>

<select id="user.loadAllUsers" parameterType="map"
resultMap="BaseResultMap">
   SELECT t.* FROM T_USER t,
(select user_id, ROW_NUMBER() OVER () as rownum from T_USER) AS t1 where t1.user_id= t.user_id
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
   <if test="start != null">
  			and t1.rownum > #{start}
   </if>
   <if test="end != null">
  			and <![CDATA[t1.rownum <= #{end}]]>
   </if>
   <choose>
	   <when test="sortField != ''">
	   		order by ${sortField} ${sortOrder}
	   </when>
	   <otherwise>
	   		order by t.user_id desc
	   </otherwise>
   </choose>
</select>

<select id="user.loadAllUsersByorganIds" parameterType="map"
resultMap="BaseResultMap">
   SELECT t.* FROM T_USER t,
(select user_id, ROW_NUMBER() OVER () as rownum from T_USER) AS t1 
where t1.user_id= t.user_id and t.organ_id in (${organIds})
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
   <if test="start != null">
  			and t1.rownum > #{start}
   </if>
   <if test="end != null">
  			and <![CDATA[t1.rownum <= #{end}]]>
   </if>
   <choose>
	   <when test="sortField != null and sortField != ''">
	   		order by ${sortField} ${sortOrder}
	   </when>
	   <otherwise>
	   		order by t.user_id desc
	   </otherwise>
   </choose>
</select>

<select id="user.loadAllUsersByorganId" parameterType="map"
resultMap="BaseResultMap">
   SELECT t.* FROM T_USER t,
(select user_id, ROW_NUMBER() OVER () as rownum from T_USER) AS t1 
where t1.user_id= t.user_id and t.organ_id = #{organId}
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
   <if test="start != null">
  			and t1.rownum > #{start}
   </if>
   <if test="end != null">
  			and <![CDATA[t1.rownum <= #{end}]]>
   </if>
   <choose>
	   <when test="sortField != null and sortField != ''">
	   		order by ${sortField} ${sortOrder}
	   </when>
	   <otherwise>
	   		order by t.user_id desc
	   </otherwise>
   </choose>
</select>

<!-- 查询总条数 -->

<select id="user.getAllUsers" parameterType="String"
resultType="java.lang.Integer">
   SELECT count(*) FROM T_USER t
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
</select>

<select id="user.getAllUsersByorganIds" parameterType="map"
resultType="java.lang.Integer">
   SELECT count(*) FROM T_USER t where t.organ_id in (${organIds})
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
</select>

<select id="user.getAllUsersByorganId" parameterType="map"
resultType="java.lang.Integer">
   SELECT count(*) FROM T_USER t
where t.organ_id = #{organId}
   <if test="key != null">
   		and t.user_name like '%${key}%' or t.user_id like '%${key}%'
   </if>
</select>
</mapper>