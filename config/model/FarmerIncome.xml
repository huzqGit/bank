<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="farmerincome">
<sql id="Income_Column_List" >
		incomeId, payId, incomeName, incomeType, netIncome
</sql>
<resultMap id="farmerIncomeList" type="com.bank.beans.FarmerIncome">
    <id column="incomeId" property="id" jdbcType="BIGINT"/>
    <result column="payId" property="payId" jdbcType="BIGINT" />
    <result column="incomeName" property="incomeName" jdbcType="VARCHAR" />
    <result column="incomeType" property="incomeType" jdbcType="INTEGER" />
	<result column="netIncome" property="netIncome" jdbcType="VARCHAR" />
</resultMap>
<insert id="save" useGeneratedKeys="true" keyProperty="id" 
		parameterType="com.bank.beans.FarmerIncome">
		insert into t_farmer_income
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="payId != null">
				payId,
			</if>
   			<if test="incomeName != null">
   				incomeName,
   			</if>
   			<if test="incomeType != null">
   				incomeType,
   			</if>
   			<if test="netIncome != null">
   				netIncome,
   			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="payId != null">
        		#{payId,jdbcType=BIGINT},
      		</if>
	        <if test="incomeName != null">
	           #{incomeName,jdbcType=VARCHAR},
	        </if>
	        <if test="incomeType != null">
	           #{incomeType,jdbcType=INTEGER},
	        </if>
	        <if test="netIncome != null">
   				#{netIncome,jdbcType=VARCHAR},
   			</if>
		</trim>
</insert>
<update id="update">
	update t_farmer_income
	set payId = #{payId,jdbcType=BIGINT},
	incomeName = #{incomeName,jdbcType=VARCHAR},
	incomeType = #{incomeType,jdbcType=INTEGER},
	netIncome = #{netIncome,jdbcType=VARCHAR}
	where incomeId = #{id,jdbcType=BIGINT}
</update>
<select id="findByPK" parameterType="Long" resultType="com.bank.beans.FarmerIncome">
		select 
		<include refid="Income_Column_List" />
		from t_farmer_income where incomeid = #{id,jdbcType=INTEGER}
</select>
<select id="findAll" parameterType="Long" resultMap="farmerIncomeList">
		select 
		<include refid="Income_Column_List" />
		from t_farmer_income where payId = #{payId,jdbcType=BIGINT}
</select>
<select id="pageing" parameterType="Map" resultMap="farmerIncomeList">
	select 
	<include refid="Income_Column_List" />
	from 
	(select t.*,rownumber() over(order by recordtime desc) as rn from t_farmer_income t
	<where>
		<if test="farmerName != null and farmerName != '' ">
			t.farmername like CONCAT(CONCAT('%',#{farmerName}),'%') 
		</if>
		<if test="farmerIdnum != null and farmerIdnum != ''">
		   	and t.farmeridnum like CONCAT(CONCAT('%',#{farmerIdnum}),'%')  
		</if>
		<if test="name != null and name != ''">
		   	and t.incometype ='#{incomeType}'  
		</if>
		<if test="recorder != null and recorder != '' ">
		    and t.recoder like CONCAT(CONCAT('%',#{recoder}),'%')  
		</if>
		<if test="recordTimeBegin !=null and recordTimeBegin != ''">
		   	<![CDATA[and t.recordtime >=to_date('#{recordTimeBegin}','yyyy-mm-dd')]]>
		</if>
		<if test="recordTimeEnd !=null and recordTimeEnd != ''">
		   	<![CDATA[and t.recordtime <=to_date('#{recordTimeEnd}','yyyy-mm-dd')]]>
		</if>
	 </where>
	 )
	 <where>
	 	<if test="start != null">
	    	rn between #{start} and #{end}
	   	</if>
	</where>
</select>
</mapper>